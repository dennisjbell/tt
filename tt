#!/usr/bin/env perl

#
# tt - Simple GTD Time Tracking
#
# author:  James Hunt <james@niftylogic.com>
# created: 2012-07-31
#
# Copyright (c) 2017 James Hunt <james@niftylogic.com>
#

use warnings;
use strict;

use POSIX qw(strftime);
use Date::Parse qw(str2time);
use YAML qw(LoadFile);
use Data::Dumper; sub dumpit { print Dumper(\@_); }

use Getopt::Long;
Getopt::Long::Configure("bundling");

our $VERSION = "1.0";
our $TT_FILE;

my @DAYNAMES = qw/Sunday Monday Tuesday Wednesday Thursday Friday Saturday/;
sub day {
	my $value = shift;
	my $want = shift || "id";
	if (grep {$_ eq $want} (qw/id valid/)) {
		my @matches =  grep {$DAYNAMES[$_] =~ qr/^$value/i} (0 .. $#DAYNAMES);
		return undef unless @matches == 1;
		return ($want eq 'valid') ? 1 : $matches[0];
	} elsif (grep {$_ eq $want} (qw/name short/) and $value =~ /^\d+$/) {
		return substr($DAYNAMES[$value] || '', 0 ,$want eq "short" ? 3 : undef);
	} else {
		die "Invalid call to day('$value','$want')\n";
	}
}
	
sub rjust
{
	my ($s, $n, $fill) = @_;
	$fill = $fill || ' ';
	return ($fill x ($n - length $s)) . $s;
}

sub mkdate
{
	my ($y,$m,$d) = @_;
	if ($y && $m && $d) {
		return sprintf("%04s-%02s-%02s", $y, $m, $d);
	}
	if ($y) { # timestamp
		return strftime("%Y-%m-%d", localtime($y));
	}
	undef;
}

sub prev_weekday
{
	my ($date, $target) = @_;

	if ($date !~ m/^\d+$/) {
		$date = str2time($date);
	}
	my $wday = strftime("%a", localtime($date));
	$wday = day($wday) or return;

	my $offset = $target - $wday;
	$offset -= 7 if $offset > 0;

	return mkdate($date + (86400*$offset));
}

sub skip_dst
{
	$_[0]+43200;
}

sub next_date
{
	return undef unless my $ts = str2time(shift);
	mkdate(skip_dst($ts+86400));
}

sub month_range
{
	my (undef, undef, undef, $d, $m, $y) = localtime(str2time($_[0]));
	$y += 1900; $m += 1;
	my $from = mkdate($y, $m, 1);
	if ($m == 12) { $y++; $m = 1; }
	else {                $m++;   }
	return $from, mkdate(str2time("$y/$m/01") - 86400);
}

sub year_range
{
	my (undef, undef, undef, undef, undef, $y) = localtime(str2time($_[0]));
	return mkdate($y+1900, 1, 1),
	       mkdate($y+1900, 12, 31);
}

sub ytd_range
{
	my (undef, undef, undef, undef, undef, $y, undef, $yday) = localtime(str2time($_[0]));
	$y += 1900;
	return parse_date_range("$y-01-01:+$yday");
}

sub parse_date_range
{
	my ($from, $to) = split(/:/, shift);
	$from = parse_date($from);
	return unless $from;

	return ($from, $from) unless $to;
	return ($from, mkdate(time)) if $to eq 'now';

	my $end = parse_date($to);
	return ($from, $end) if $end;

	if ($to =~ m/^\d+$/) {
		$end = next_date($from) until $end =~ m/-$to$/;
		return ($from, $end);
	}

	if ($to =~ m/^[+-]\d+$/) {
		my $ts = str2time($from);
		$end = mkdate(skip_dst($ts+($to*86400)));
		return ($to > 0 ? ($from, $end) : ($end, $from));
	}
}

sub time_stat
{
	my @st = stat $TT_FILE or return undef;
	return int((time - $st[9]) / 60 + 0.5);
}

sub parse_time
{
	my $str = shift;
	return 0 unless $str;
	return $str if $str =~ m/^\d+$/;

	if ($str eq "s") {
		return time_stat;
	}

	if ($str =~ m/^((\d+(\.\d+)?)h)?((\d+)m)?$/) {
		return ($2||0)*60 + ($5||0);
	}

	if ($str =~ m/^((\d+)m)?((\d+(\.\d+)?)h)?$/) {
		return ($4||0)*60 + ($2||0);
	}

	undef;
}

sub parse_date
{
	my $str = shift;
	if ($str =~ m/^(\d+)([dw])$/) {
		my $offset = 0;
		$offset = 86400   if $2 eq 'd';
		$offset = 86400*7 if $2 eq 'w';
		return mkdate(time-$offset*$1);
	}
	if ($str =~ m/^(\d\d\d\d)-(\d+)-(\d+)$/) {
		return mkdate($1,$2,$3);
	}

	if ($str =~ m|^(\d+)/(\d+)/(\d\d\d\d)$|) {
		return mkdate($3,$1,$2);
	}

	if ($str =~ m/^((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\s+(\d+)\s+(\d\d\d\d)/) {
		my %MONTHS = (
			Jan =>  1, Feb =>  2, Mar =>  3, Apr =>  4,
			May =>  5, Jun =>  6, Jul =>  7, Aug =>  8,
			Sep =>  9, Oct => 10, Nov => 11, Dec => 12
		);
		return mkdate($3,$MONTHS{$1},$2);
	}

	debug("parse_date: got called with '$str'; have no response");
	return ();

	# FIXME: handle relative date of "last <dayname>"
}

sub track
{
	my ($date, $project, $time, $comment) = @_;
	$comment =~ s/\n/.  /;
	open my $fh, ">>", $TT_FILE or die "$TT_FILE: $!\n";
	printf $fh "%s  %12s  %3i  %s\n", $date, $project, $time, $comment;
	close $fh;
}

sub extract
{
	my ($from,$to) = @_;
	$to ||= "9999-99-99";
	$from ||= "0000-00-00";
	my $res = {};

	open TT, "<", $TT_FILE or die "$TT_FILE: $!\n";
	while (<TT>) {
		next unless /^(\d{4}-\d{2}-\d{2}) /;
		my $d = $1;
		next if $d lt $from or $d gt $to;
		chomp;
		# Key by first subgroup match
		push @{$res->{$d}}, $_;
	}

	return $res;
}

sub sum_totals
{
	my ($lines) = @_;
	my $total = {};

	LINE:
	for (@$lines) {
		next unless m/^\d\d\d\d-\d\d-\d\d\s+(\S+)\s+(\d+)/;
		$total->{$1} += $2;
	}
	return $total;
}

sub debug1
{
	map { print STDERR "DEBUG> $_\n" } @_;
}
sub debug0 { }

sub usage
{
	(my $bin = $0) =~ s|.*/||;
	print "USAGE: $bin T 99 summary of what you did\n",
	      "       $bin [OPTIONS]\n",
	      "$bin -h for help\n";
	exit shift;
}

sub help
{
	print <<EOF;
tt - dead-simple time tracking
Copyright Â© 2017 James Hunt

Basic Usage:
  tt [PROJECT] [MINUTES|'s'] [COMMENT]
  tt -x
  tt -s week
  tt -sf mtd

Advanced Usage:
  tt [OPTIONS]

  OPTIONS
  --help, -h
      Show this helpful help message

  --summary, -s <period>
      Report tracked time in a date range or named
      reporting period.

      Periods:   day, week, month, mtd, year, ytd, all
      Arbitrary: YYYY-MM-DD:YYYY-MM-DD
                 YYYY-MM-DD:+N
                 YYYY-MM-DD:DD
                 YYYY-MM-DD:now

  --full, -f
      Show details in --summary.  Ignored otherwise.

  --date, -d YYYY-MM-DD
      Use specified date as reference point.

  --kill, --reset, -x
      Reset the counter on `tt project s ...`

  --prompt
      Print a small summary of what `tt project s ...`
      will track (suitable for embedding in a prompt).

  --edit, -e
      Open the time tracking database in your \$EDITOR.

  --config, -C /path/to/tt.conf
      Use alternate configuration file.
      Default is ~/.ttrc, then /etc/tt.conf

  --ttfile, -T /path/to/ttdb
      Use alternate tt database file.
      Defaults to ~/.timetrack

EOF
}

sub print_lines
{
	my $lines = shift;
	for (@$lines) {
		my ($date, $project, $time, @rest) = split /\s+/;
		printf "%s  %12s  %3i  %s\n", $date, $project, $time, join(' ', @rest);
	}
	print "\n" if @$lines;
}

sub print_totals {
	my ($total, $rates) = @_;

	printf "     Project    Time    Hours |    \$\$\$.\$\$ CUR\n";
	printf "-----------------------------------------------\n";
	my %time_c = ();
	my %wage_c = ();
	for my $k (keys %$total) {
		my $n = $total->{$k};
		my $h = $n/60.0;
		my $wage = '      -  ';
		if ($rates->{$k}) {
			my ($r,$c) = $rates->{$k} =~ m/^\s*(\d+(?:\.\d+)?)(?:\s+(\w+))/;
			$c ||= 'USD';
			$wage = sprintf("%9.2lf", $h*$r);
			$wage_c{$c} = ($wage_c{$c} || 0) + $h*$r;
			$time_c{$c} += $n;
			$wage .= " $c";
		} else {
			$time_c{''} += $n;
		}
		printf "%12s  %6i  %6.1fh | %s \n", $k, $n, $h, $wage;
	}
	printf "-------TOTALS----------------------------------\n";
	for (keys %time_c) {
		printf "              %6i  %6.1fh |",  $time_c{$_}, $time_c{$_}/60.0,;
		if (defined $wage_c{$_}) {
			printf " %9.2lf %s\n", $wage_c{$_}, $_;
		} else {
			printf "       -\n";
		}
	}
}

### MAIN ######################################################################

# -- Parse and Validate Options --------------------------------------------{{{
my %opt = ();
GetOptions(\%opt,
	'help|h',
	'debug|v',     # undocumented
	'summary|s',
	'projects|p',
	'full|f',
	'date|d=s',
	'edit|e',
	'kill|reset|x',
	'prompt',
	'config|C=s',
	'ttfile|T=s',
) or usage(1);

*debug = $opt{debug} ? \&debug1 : \&debug0;

if (exists $opt{date}) {
	my $date = parse_date($opt{date});
	$date or die "$opt{date}: not a valid date spec.\n";
	$opt{date} = $date;
} else {
	$opt{date} = mkdate(time);
}
# }}}

if ($opt{help}) {
	help;
	exit 0;
}

debug("tt v$VERSION starting up");

#-- Parse Config -----------------------------------------------------------{{{
my $CFG = undef;
my ($cfg_filename) = (grep {$_ and -f $_} ($opt{config}, "$ENV{HOME}/.ttrc", "/etc/tt.conf"));
if ($cfg_filename) {
	eval { $CFG = LoadFile($cfg_filename);} or do {
		die "Failed to load config 'cfg_filename': $@\n";
	};
}
$CFG = {} unless $CFG;
debug("CFG: (from '$cfg_filename')", Dumper($CFG));

$TT_FILE = $opt{ttfile} || $CFG->{ttfile} || "~/.timetrack";
$TT_FILE =~ s/^~\//$ENV{HOME}\//;

die "Invalid start day in ${cfg_filename}: $CFG->{weekstart}\n"
	if $CFG->{weekstart} and ! day($CFG->{weekstart},'valid');
# }}}

if ($opt{prompt}) {
	my $since;
	print defined($since = time_stat) ? "${since}m" : "??";
	exit 0;
}

exec '/bin/sh -c "$EDITOR '.$TT_FILE.'"' if $opt{edit};
if ($opt{kill}) {
	die "\nDetected --kill, --reset or -x in your comments, but its position was\n".
			"lost due to option parsing. Perhaps you should quote your comment?\n".
			"Cowardly giving up.\n"
		if @ARGV > 0;

	if ($TT_FILE =~ /dropbox/i) {
		# Dropbox does not sync timestamp changes
		my $minutes = time_stat || 0;
		exit 0 unless $minutes;
		my $now = strftime "%F %T UTC", gmtime $^T;
		open my $fh, ">>", $TT_FILE or die "$TT_FILE: $!\n";
		printf $fh "# Reset on %s: abandoning %d minutes\n", $now, $minutes;
		close $fh;
	} else {
		utime(undef, undef, $TT_FILE);
	}
	exit 0;
}


if (@ARGV == 0 or $opt{summary}) {
	my ($from, $to); # Date range of summary

	# Process named summation periods
	my $period = $ARGV[0] || 'today';
	if ($period eq 'month') {
		($from, $to) = month_range($opt{date});

	} elsif ($period eq 'mtd' or $period eq 'm') {
		$opt{date} =~ m/(\d+)$/;
		my $mday = $1-1;
		($from, $to) = parse_date_range("$opt{date}:-$mday");

	} elsif ($period eq 'year') {
		($from, $to) = year_range($opt{date});

	} elsif ($period eq 'ytd' or $period eq 'y') {
		($from, $to) = ytd_range($opt{date});

	} elsif ($period eq 'week' or $period eq 'w') {
		my $start_day = $CFG->{weekstart} || 'Sun';
		my $prev = prev_weekday($opt{date}, day($start_day))
			or die "Cannot determine ".day(day($start_day),'name')." before $opt{date}\n";
		($from, $to) = parse_date_range("$prev:now");

	} elsif ($period eq 'all' or $period eq 'a') {
		$from = $to = "";

	} else {
		($from, $to) = parse_date_range($period);
		if (!$from || !$to) {
			($from, $to) = ($opt{date}, $opt{date});
		}
	}

	debug("summary period is $period");
	debug("from: $from", "to:   $to");

	print "Time Tracking Report\n";
	if ($from eq $to) {
		printf "  for %s\n\n", $from || "all entries";
	} else {
		print "  $from - $to\n\n";
	}
	my $log = extract($from, $to);
	my $dates = [sort keys %$log];

	my $grand_total = {};
	for my $date (@$dates) {
		my $total = sum_totals($log->{$date});
		for my $k (keys %$total) {
			if (ref($total->{$k}) eq 'HASH') {
				for my $k2 (keys %{$total->{$k}}) {
					$grand_total->{$k}{$k2} += $total->{$k}{$k2};
				}
			} else {
				$grand_total->{$k} += $total->{$k};
			}
		}
		print_lines($log->{$date}) if $opt{full};
	}
	print_totals($grand_total, $CFG->{rates});

	my $since = time_stat;
	defined($since) and print rjust(" updated $since min. ago ---\n", 30, '-');

	exit 0;

if (@ARGV >= 3) {
	my ($project, $time_s, @rest) = @ARGV;
	my $comment = join(" ", @rest);

	if (parse_time($project)) {
		print "Oops... '$project' looks like a time spec;\nDid you forget the project argument? (it comes first)\n";
		exit 1;
	}

	my $time = parse_time($time_s);
	if (!$time) {
		die "$time_s: does not look like a valid time spec\n";
	}

	track($opt{date}, $project, $time, $comment);
	exit 0;

debug("\@argv == ".@ARGV);
debug(map { "argv[]: $_" } @ARGV);

} else {
	usage(1);
}

# vim:ts=2:sts=2:sw=2:noet:ft=perl
